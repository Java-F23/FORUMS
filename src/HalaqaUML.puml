@startuml

class User {
  - userID: int
  - username: String
  - password: String
  - userType: UserType
  - createdAt: Date
  - favoritePosts: ArrayList<Post>
  + User(username: String, password: String, userType: UserType)
  + addFavoritePost(post: Post): void
  + removeFavoritePost(post: Post): void
  + getFavoritePosts(): ArrayList<Post>
  + editPost(post: Post, newContent: String): void
  + editComment(comment: Comment, newContent: String): void
}

enum UserType {
  NORMAL
  ADMIN
}

class Post {
  - postID: int
  - title: String
  - content: String
  - author: User
  - timestamp: Date
  - viewCount: int
  - likeCount: int
  - comments: ArrayList<Comment>
  + Post(title: String, content: String, author: User)
  + setTitle(title: String): void
  + setContent(content: String): void
  + getAuthor(): User
  + getComments(): ArrayList<Comment>
  + addComment(comment: Comment): void
  + deleteComment(comment: Comment): void
}

class Comment {
  - commentID: int
  - content: String
  - author: User
  - post: Post
  - upvotes: int
  - downvotes: int
  + Comment(content: String, author: User, post: Post)
  + setContent(content: String): void
  + getAuthor(): User
  + getPost(): Post
  + upvote(): void
  + downvote(): void
}

class DataStorageManager {
  - users: ArrayList<User>
  - posts: ArrayList<Post>
  - comments: ArrayList<Comment>
  - reports: ArrayList<Report>
  + reportPost(post: Post, reporter: User, reason: String): void
  + reportComment(comment: Comment, reporter: User, reason: String): void
  + getReports(): ArrayList<Report>
  + resolveReport(report: Report): void
  + deleteReportedItem(report: Report): void
  + readUserDataFromFile(): ArrayList<User>
  + searchPosts(keyword: String): ArrayList<Post>
  + getComments(): ArrayList<Comment>
  + writeUserDataToFile(users: ArrayList<User>): void
  + storePostData(post: Post): void
  + storeCommentData(comment: Comment): void
  + filterPostsByAuthor(authorUsername: String): ArrayList<Post>
  + editPost(post: Post, newTitle: String, newContent: String): void
  + editComment(comment: Comment, newContent: String): void
  + deletePost(post: Post): void
  + sortPostsByPopularity(): ArrayList<Post>
  + sortPostsByDate(): ArrayList<Post>
  + deleteComment(comment: Comment): void
  + readAllPosts(): ArrayList<Post>
  + searchPostsByDateRange(startDate: Date, endDate: Date): ArrayList<Post>
}

class ForumTest {
  + main(args: String[]): void
}

class Report {
  - reporter: User
  - reportedItem: Serializable
  - reason: String
  - resolved: boolean
  + Report(reporter: User, reportedItem: Serializable, reason: String)
  + resolveReport(): void
  + isResolved(): boolean
}

enum ActionType {
  DELETE_POST
  DELETE_COMMENT
  SKIP
}

User --|> Post
User --|> Comment
Post --|> Comment
Comment --|> Post
Report --|> User
Report --|> Comment
Report --|> Post
DataStorageManager --|> User
DataStorageManager --|> Post
DataStorageManager --|> Comment
DataStorageManager --|> Report

@enduml
